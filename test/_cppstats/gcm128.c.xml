<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/xiaoyu/github/ArchReviewer/test/_cppstats/gcm128.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/crypto.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/cryptlib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/endian.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"crypto/modes.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STRICT_ALIGNMENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>size_t</name> <name>size_t_aX</name></type> <name>__attribute</name>((<name>__aligned__</name>(1)));</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>size_t</name></type> <name>size_t_aX</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BSWAP4</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STRICT_ALIGNMENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GETU32</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETU32</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BSWAP4(*(const u32 *)(p))</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PUTU32</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUTU32</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>*(u32 *)(p) = BSWAP4(v)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__riscv</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INCLUDE_C_GMULT_4BIT</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INCLUDE_C_GHASH_4BIT</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PACK</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((size_t)(s)&lt;&lt;(sizeof(size_t)*8-16))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDUCE1BIT</name><parameter_list>(<parameter><type><name>V</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (sizeof(size_t)==8) { u64 T = U64(0xe100000000000000) &amp; (0-(V.lo&amp;1)); V.lo = (V.hi&lt;&lt;63)|(V.lo&gt;&gt;1); V.hi = (V.hi&gt;&gt;1 )^T; } else { u32 T = 0xe1000000U &amp; (0-(u32)(V.lo&amp;1)); V.lo = (V.hi&lt;&lt;63)|(V.lo&gt;&gt;1); V.hi = (V.hi&gt;&gt;1 )^((u64)T&lt;&lt;32); } } while(0)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type> <name>gcm_init_4bit</name><parameter_list>(<parameter><decl><type><name>u128</name></type> <name><name>Htable</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u64</name></type> <name><name>H</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u128</name></type> <name>V</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_SMALL_FOOTPRINT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>Htable</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>hi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Htable</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lo</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>V</name><operator>.</operator><name>hi</name></name> <operator>=</operator> <name><name>H</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>V</name><operator>.</operator><name>lo</name></name> <operator>=</operator> <name><name>H</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_SMALL_FOOTPRINT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for <control>(<init><expr><name><name>Htable</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>V</name></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>REDUCE1BIT</name><argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Htable</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>V</name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>u128</name> <modifier>*</modifier></type><name>Hi</name> <init>= <expr><name>Htable</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>V</name> <operator>=</operator> <operator>*</operator><name>Hi</name></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>Hi</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>hi</name> <operator>=</operator> <name><name>V</name><operator>.</operator><name>hi</name></name> <operator>^</operator> <name><name>Htable</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>hi</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Hi</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>lo</name> <operator>=</operator> <name><name>V</name><operator>.</operator><name>lo</name></name> <operator>^</operator> <name><name>Htable</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>lo</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>Htable</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>V</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDUCE1BIT</name><argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Htable</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>V</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDUCE1BIT</name><argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Htable</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>V</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDUCE1BIT</name><argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Htable</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>V</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Htable</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>hi</name> <operator>=</operator> <name><name>V</name><operator>.</operator><name>hi</name></name> <operator>^</operator> <name><name>Htable</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>hi</name></expr><operator>,</operator> <expr><name><name>Htable</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>lo</name> <operator>=</operator> <name><name>V</name><operator>.</operator><name>lo</name></name> <operator>^</operator> <name><name>Htable</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>lo</name></expr>;</expr_stmt>
<expr_stmt><expr><name>V</name> <operator>=</operator> <name><name>Htable</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Htable</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>hi</name> <operator>=</operator> <name><name>V</name><operator>.</operator><name>hi</name></name> <operator>^</operator> <name><name>Htable</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>hi</name></expr><operator>,</operator> <expr><name><name>Htable</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>lo</name> <operator>=</operator> <name><name>V</name><operator>.</operator><name>lo</name></name> <operator>^</operator> <name><name>Htable</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>lo</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Htable</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>hi</name> <operator>=</operator> <name><name>V</name><operator>.</operator><name>hi</name></name> <operator>^</operator> <name><name>Htable</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>hi</name></expr><operator>,</operator> <expr><name><name>Htable</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>lo</name> <operator>=</operator> <name><name>V</name><operator>.</operator><name>lo</name></name> <operator>^</operator> <name><name>Htable</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>lo</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Htable</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>hi</name> <operator>=</operator> <name><name>V</name><operator>.</operator><name>hi</name></name> <operator>^</operator> <name><name>Htable</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>hi</name></expr><operator>,</operator> <expr><name><name>Htable</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>lo</name> <operator>=</operator> <name><name>V</name><operator>.</operator><name>lo</name></name> <operator>^</operator> <name><name>Htable</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>lo</name></expr>;</expr_stmt>
<expr_stmt><expr><name>V</name> <operator>=</operator> <name><name>Htable</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Htable</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>hi</name> <operator>=</operator> <name><name>V</name><operator>.</operator><name>hi</name></name> <operator>^</operator> <name><name>Htable</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>hi</name></expr><operator>,</operator> <expr><name><name>Htable</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>lo</name> <operator>=</operator> <name><name>V</name><operator>.</operator><name>lo</name></name> <operator>^</operator> <name><name>Htable</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>lo</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Htable</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>hi</name> <operator>=</operator> <name><name>V</name><operator>.</operator><name>hi</name></name> <operator>^</operator> <name><name>Htable</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>hi</name></expr><operator>,</operator> <expr><name><name>Htable</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>lo</name> <operator>=</operator> <name><name>V</name><operator>.</operator><name>lo</name></name> <operator>^</operator> <name><name>Htable</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>lo</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Htable</name><index>[<expr><literal type="number">11</literal></expr>]</index></name><operator>.</operator><name>hi</name> <operator>=</operator> <name><name>V</name><operator>.</operator><name>hi</name></name> <operator>^</operator> <name><name>Htable</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>hi</name></expr><operator>,</operator> <expr><name><name>Htable</name><index>[<expr><literal type="number">11</literal></expr>]</index></name><operator>.</operator><name>lo</name> <operator>=</operator> <name><name>V</name><operator>.</operator><name>lo</name></name> <operator>^</operator> <name><name>Htable</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>lo</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Htable</name><index>[<expr><literal type="number">12</literal></expr>]</index></name><operator>.</operator><name>hi</name> <operator>=</operator> <name><name>V</name><operator>.</operator><name>hi</name></name> <operator>^</operator> <name><name>Htable</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>hi</name></expr><operator>,</operator> <expr><name><name>Htable</name><index>[<expr><literal type="number">12</literal></expr>]</index></name><operator>.</operator><name>lo</name> <operator>=</operator> <name><name>V</name><operator>.</operator><name>lo</name></name> <operator>^</operator> <name><name>Htable</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>lo</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Htable</name><index>[<expr><literal type="number">13</literal></expr>]</index></name><operator>.</operator><name>hi</name> <operator>=</operator> <name><name>V</name><operator>.</operator><name>hi</name></name> <operator>^</operator> <name><name>Htable</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>hi</name></expr><operator>,</operator> <expr><name><name>Htable</name><index>[<expr><literal type="number">13</literal></expr>]</index></name><operator>.</operator><name>lo</name> <operator>=</operator> <name><name>V</name><operator>.</operator><name>lo</name></name> <operator>^</operator> <name><name>Htable</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>lo</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Htable</name><index>[<expr><literal type="number">14</literal></expr>]</index></name><operator>.</operator><name>hi</name> <operator>=</operator> <name><name>V</name><operator>.</operator><name>hi</name></name> <operator>^</operator> <name><name>Htable</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>hi</name></expr><operator>,</operator> <expr><name><name>Htable</name><index>[<expr><literal type="number">14</literal></expr>]</index></name><operator>.</operator><name>lo</name> <operator>=</operator> <name><name>V</name><operator>.</operator><name>lo</name></name> <operator>^</operator> <name><name>Htable</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>lo</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Htable</name><index>[<expr><literal type="number">15</literal></expr>]</index></name><operator>.</operator><name>hi</name> <operator>=</operator> <name><name>V</name><operator>.</operator><name>hi</name></name> <operator>^</operator> <name><name>Htable</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>hi</name></expr><operator>,</operator> <expr><name><name>Htable</name><index>[<expr><literal type="number">15</literal></expr>]</index></name><operator>.</operator><name>lo</name> <operator>=</operator> <name><name>V</name><operator>.</operator><name>lo</name></name> <operator>^</operator> <name><name>Htable</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>lo</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GHASH_ASM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__arm__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__arm</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<expr_stmt><expr><name>DECLARE_IS_ENDIAN</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>IS_LITTLE_ENDIAN</name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>V</name> <operator>=</operator> <name><name>Htable</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Htable</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>hi</name> <operator>=</operator> <name><name>V</name><operator>.</operator><name>lo</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Htable</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>lo</name> <operator>=</operator> <name><name>V</name><operator>.</operator><name>hi</name></name></expr>;</expr_stmt>
</block_content>}</block></for></block_content></block></if> <else>else<block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>V</name> <operator>=</operator> <name><name>Htable</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Htable</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>hi</name> <operator>=</operator> <name><name>V</name><operator>.</operator><name>lo</name></name> <operator>&lt;&lt;</operator> <literal type="number">32</literal> <operator>|</operator> <name><name>V</name><operator>.</operator><name>lo</name></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Htable</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>lo</name> <operator>=</operator> <name><name>V</name><operator>.</operator><name>hi</name></name> <operator>&lt;&lt;</operator> <literal type="number">32</literal> <operator>|</operator> <name><name>V</name><operator>.</operator><name>hi</name></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
</block_content>}</block></for></block_content></block></else></if_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GHASH_ASM</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_C_GMULT_4BIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name><name>rem_4bit</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{
<expr><call><name>PACK</name><argument_list>(<argument><expr><literal type="number">0x0000</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>PACK</name><argument_list>(<argument><expr><literal type="number">0x1C20</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>PACK</name><argument_list>(<argument><expr><literal type="number">0x3840</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>PACK</name><argument_list>(<argument><expr><literal type="number">0x2460</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>PACK</name><argument_list>(<argument><expr><literal type="number">0x7080</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>PACK</name><argument_list>(<argument><expr><literal type="number">0x6CA0</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>PACK</name><argument_list>(<argument><expr><literal type="number">0x48C0</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>PACK</name><argument_list>(<argument><expr><literal type="number">0x54E0</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>PACK</name><argument_list>(<argument><expr><literal type="number">0xE100</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>PACK</name><argument_list>(<argument><expr><literal type="number">0xFD20</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>PACK</name><argument_list>(<argument><expr><literal type="number">0xD940</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>PACK</name><argument_list>(<argument><expr><literal type="number">0xC560</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>PACK</name><argument_list>(<argument><expr><literal type="number">0x9180</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>PACK</name><argument_list>(<argument><expr><literal type="number">0x8DA0</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>PACK</name><argument_list>(<argument><expr><literal type="number">0xA9C0</literal></expr></argument>)</argument_list></call></expr>, <macro><name>PACK</name><argument_list>(<argument><literal type="number">0xB5E0</literal></argument>)</argument_list></macro>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>gcm_gmult_4bit</name><parameter_list>(<parameter><decl><type><name>u64</name></type> <name><name>Xi</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u128</name></type> <name><name>Htable</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u128</name></type> <name>Z</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>rem</name></decl>, <decl><type ref="prev"/><name>nlo</name></decl>, <decl><type ref="prev"/><name>nhi</name></decl>;</decl_stmt>
<expr_stmt><expr><name>DECLARE_IS_ENDIAN</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nlo</name> <operator>=</operator> <operator>(</operator><operator>(</operator><specifier>const</specifier> <name>u8</name> <operator>*</operator><operator>)</operator><name>Xi</name><operator>)</operator><index>[<expr><literal type="number">15</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name>nhi</name> <operator>=</operator> <name>nlo</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nlo</name> <operator>&amp;=</operator> <literal type="number">0xf</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Z</name><operator>.</operator><name>hi</name></name> <operator>=</operator> <name><name>Htable</name><index>[<expr><name>nlo</name></expr>]</index></name><operator>.</operator><name>hi</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Z</name><operator>.</operator><name>lo</name></name> <operator>=</operator> <name><name>Htable</name><index>[<expr><name>nlo</name></expr>]</index></name><operator>.</operator><name>lo</name></expr>;</expr_stmt>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rem</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>Z</name><operator>.</operator><name>lo</name></name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Z</name><operator>.</operator><name>lo</name></name> <operator>=</operator> <operator>(</operator><name><name>Z</name><operator>.</operator><name>hi</name></name> <operator>&lt;&lt;</operator> <literal type="number">60</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>Z</name><operator>.</operator><name>lo</name></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Z</name><operator>.</operator><name>hi</name></name> <operator>=</operator> <operator>(</operator><name><name>Z</name><operator>.</operator><name>hi</name></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>Z</name><operator>.</operator><name>hi</name></name> <operator>^=</operator> <name><name>rem_4bit</name><index>[<expr><name>rem</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>Z</name><operator>.</operator><name>hi</name></name> <operator>^=</operator> <operator>(</operator><name>u64</name><operator>)</operator><name><name>rem_4bit</name><index>[<expr><name>rem</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>Z</name><operator>.</operator><name>hi</name></name> <operator>^=</operator> <name><name>Htable</name><index>[<expr><name>nhi</name></expr>]</index></name><operator>.</operator><name>hi</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Z</name><operator>.</operator><name>lo</name></name> <operator>^=</operator> <name><name>Htable</name><index>[<expr><name>nhi</name></expr>]</index></name><operator>.</operator><name>lo</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>cnt</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nlo</name> <operator>=</operator> <operator>(</operator><operator>(</operator><specifier>const</specifier> <name>u8</name> <operator>*</operator><operator>)</operator><name>Xi</name><operator>)</operator><index>[<expr><name>cnt</name></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name>nhi</name> <operator>=</operator> <name>nlo</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nlo</name> <operator>&amp;=</operator> <literal type="number">0xf</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rem</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>Z</name><operator>.</operator><name>lo</name></name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Z</name><operator>.</operator><name>lo</name></name> <operator>=</operator> <operator>(</operator><name><name>Z</name><operator>.</operator><name>hi</name></name> <operator>&lt;&lt;</operator> <literal type="number">60</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>Z</name><operator>.</operator><name>lo</name></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Z</name><operator>.</operator><name>hi</name></name> <operator>=</operator> <operator>(</operator><name><name>Z</name><operator>.</operator><name>hi</name></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>Z</name><operator>.</operator><name>hi</name></name> <operator>^=</operator> <name><name>rem_4bit</name><index>[<expr><name>rem</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>Z</name><operator>.</operator><name>hi</name></name> <operator>^=</operator> <operator>(</operator><name>u64</name><operator>)</operator><name><name>rem_4bit</name><index>[<expr><name>rem</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>Z</name><operator>.</operator><name>hi</name></name> <operator>^=</operator> <name><name>Htable</name><index>[<expr><name>nlo</name></expr>]</index></name><operator>.</operator><name>hi</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Z</name><operator>.</operator><name>lo</name></name> <operator>^=</operator> <name><name>Htable</name><index>[<expr><name>nlo</name></expr>]</index></name><operator>.</operator><name>lo</name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>IS_LITTLE_ENDIAN</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BSWAP8</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>Xi</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>BSWAP8</name><argument_list>(<argument><expr><name><name>Z</name><operator>.</operator><name>hi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Xi</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>BSWAP8</name><argument_list>(<argument><expr><name><name>Z</name><operator>.</operator><name>lo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>u8</name> <operator>*</operator><operator>)</operator><name>Xi</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>v</name></decl>;</decl_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>u32</name><operator>)</operator><operator>(</operator><name><name>Z</name><operator>.</operator><name>hi</name></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTU32</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>u32</name><operator>)</operator><operator>(</operator><name><name>Z</name><operator>.</operator><name>hi</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTU32</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>u32</name><operator>)</operator><operator>(</operator><name><name>Z</name><operator>.</operator><name>lo</name></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTU32</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>u32</name><operator>)</operator><operator>(</operator><name><name>Z</name><operator>.</operator><name>lo</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTU32</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>Xi</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>Z</name><operator>.</operator><name>hi</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Xi</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>Z</name><operator>.</operator><name>lo</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GHASH_ASM</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_C_GHASH_4BIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_SMALL_FOOTPRINT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>gcm_ghash_4bit</name><parameter_list>(<parameter><decl><type><name>u64</name></type> <name><name>Xi</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u128</name></type> <name><name>Htable</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>inp</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u128</name></type> <name>Z</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>rem</name></decl>, <decl><type ref="prev"/><name>nlo</name></decl>, <decl><type ref="prev"/><name>nhi</name></decl>;</decl_stmt>
<expr_stmt><expr><name>DECLARE_IS_ENDIAN</name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nlo</name> <operator>=</operator> <operator>(</operator><operator>(</operator><specifier>const</specifier> <name>u8</name> <operator>*</operator><operator>)</operator><name>Xi</name><operator>)</operator><index>[<expr><literal type="number">15</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name>nlo</name> <operator>^=</operator> <name><name>inp</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nhi</name> <operator>=</operator> <name>nlo</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nlo</name> <operator>&amp;=</operator> <literal type="number">0xf</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Z</name><operator>.</operator><name>hi</name></name> <operator>=</operator> <name><name>Htable</name><index>[<expr><name>nlo</name></expr>]</index></name><operator>.</operator><name>hi</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Z</name><operator>.</operator><name>lo</name></name> <operator>=</operator> <name><name>Htable</name><index>[<expr><name>nlo</name></expr>]</index></name><operator>.</operator><name>lo</name></expr>;</expr_stmt>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rem</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>Z</name><operator>.</operator><name>lo</name></name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Z</name><operator>.</operator><name>lo</name></name> <operator>=</operator> <operator>(</operator><name><name>Z</name><operator>.</operator><name>hi</name></name> <operator>&lt;&lt;</operator> <literal type="number">60</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>Z</name><operator>.</operator><name>lo</name></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Z</name><operator>.</operator><name>hi</name></name> <operator>=</operator> <operator>(</operator><name><name>Z</name><operator>.</operator><name>hi</name></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>Z</name><operator>.</operator><name>hi</name></name> <operator>^=</operator> <name><name>rem_4bit</name><index>[<expr><name>rem</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>Z</name><operator>.</operator><name>hi</name></name> <operator>^=</operator> <operator>(</operator><name>u64</name><operator>)</operator><name><name>rem_4bit</name><index>[<expr><name>rem</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>Z</name><operator>.</operator><name>hi</name></name> <operator>^=</operator> <name><name>Htable</name><index>[<expr><name>nhi</name></expr>]</index></name><operator>.</operator><name>hi</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Z</name><operator>.</operator><name>lo</name></name> <operator>^=</operator> <name><name>Htable</name><index>[<expr><name>nhi</name></expr>]</index></name><operator>.</operator><name>lo</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>cnt</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nlo</name> <operator>=</operator> <operator>(</operator><operator>(</operator><specifier>const</specifier> <name>u8</name> <operator>*</operator><operator>)</operator><name>Xi</name><operator>)</operator><index>[<expr><name>cnt</name></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name>nlo</name> <operator>^=</operator> <name><name>inp</name><index>[<expr><name>cnt</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nhi</name> <operator>=</operator> <name>nlo</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nlo</name> <operator>&amp;=</operator> <literal type="number">0xf</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rem</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>Z</name><operator>.</operator><name>lo</name></name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Z</name><operator>.</operator><name>lo</name></name> <operator>=</operator> <operator>(</operator><name><name>Z</name><operator>.</operator><name>hi</name></name> <operator>&lt;&lt;</operator> <literal type="number">60</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>Z</name><operator>.</operator><name>lo</name></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Z</name><operator>.</operator><name>hi</name></name> <operator>=</operator> <operator>(</operator><name><name>Z</name><operator>.</operator><name>hi</name></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>Z</name><operator>.</operator><name>hi</name></name> <operator>^=</operator> <name><name>rem_4bit</name><index>[<expr><name>rem</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>Z</name><operator>.</operator><name>hi</name></name> <operator>^=</operator> <operator>(</operator><name>u64</name><operator>)</operator><name><name>rem_4bit</name><index>[<expr><name>rem</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>Z</name><operator>.</operator><name>hi</name></name> <operator>^=</operator> <name><name>Htable</name><index>[<expr><name>nlo</name></expr>]</index></name><operator>.</operator><name>hi</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Z</name><operator>.</operator><name>lo</name></name> <operator>^=</operator> <name><name>Htable</name><index>[<expr><name>nlo</name></expr>]</index></name><operator>.</operator><name>lo</name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>IS_LITTLE_ENDIAN</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BSWAP8</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>Xi</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>BSWAP8</name><argument_list>(<argument><expr><name><name>Z</name><operator>.</operator><name>hi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Xi</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>BSWAP8</name><argument_list>(<argument><expr><name><name>Z</name><operator>.</operator><name>lo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>u8</name> <operator>*</operator><operator>)</operator><name>Xi</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>v</name></decl>;</decl_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>u32</name><operator>)</operator><operator>(</operator><name><name>Z</name><operator>.</operator><name>hi</name></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTU32</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>u32</name><operator>)</operator><operator>(</operator><name><name>Z</name><operator>.</operator><name>hi</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTU32</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>u32</name><operator>)</operator><operator>(</operator><name><name>Z</name><operator>.</operator><name>lo</name></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTU32</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>u32</name><operator>)</operator><operator>(</operator><name><name>Z</name><operator>.</operator><name>lo</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTU32</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>Xi</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>Z</name><operator>.</operator><name>hi</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Xi</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>Z</name><operator>.</operator><name>lo</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>inp</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><name>void</name></type> <name>gcm_gmult_4bit</name><parameter_list>(<parameter><decl><type><name>u64</name></type> <name><name>Xi</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u128</name></type> <name><name>Htable</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>gcm_ghash_4bit</name><parameter_list>(<parameter><decl><type><name>u64</name></type> <name><name>Xi</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u128</name></type> <name><name>Htable</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>inp</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GCM_MUL</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ctx-&gt;funcs.gmult(ctx-&gt;Xi.u,ctx-&gt;Htable)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GHASH_ASM</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_SMALL_FOOTPRINT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GHASH</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>,<parameter><type><name>in</name></type></parameter>,<parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ctx-&gt;funcs.ghash((ctx)-&gt;Xi.u,(ctx)-&gt;Htable,in,len)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GHASH_CHUNK</name></cpp:macro> <cpp:value>(3*1024)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>GHASH_ASM</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_CPUID_OBJ</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>I386_ONLY</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__i386</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_M_IX86</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_M_AMD64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_M_X64</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GHASH_ASM_X86_OR_64</name></cpp:macro></cpp:define>
<function_decl><type><name>void</name></type> <name>gcm_init_clmul</name><parameter_list>(<parameter><decl><type><name>u128</name></type> <name><name>Htable</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u64</name></type> <name><name>Xi</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>gcm_gmult_clmul</name><parameter_list>(<parameter><decl><type><name>u64</name></type> <name><name>Xi</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u128</name></type> <name><name>Htable</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>gcm_ghash_clmul</name><parameter_list>(<parameter><decl><type><name>u64</name></type> <name><name>Xi</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u128</name></type> <name><name>Htable</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>inp</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_M_IX86</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gcm_init_avx</name></cpp:macro> <cpp:value>gcm_init_clmul</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gcm_gmult_avx</name></cpp:macro> <cpp:value>gcm_gmult_clmul</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gcm_ghash_avx</name></cpp:macro> <cpp:value>gcm_ghash_clmul</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><name>void</name></type> <name>gcm_init_avx</name><parameter_list>(<parameter><decl><type><name>u128</name></type> <name><name>Htable</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u64</name></type> <name><name>Xi</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>gcm_gmult_avx</name><parameter_list>(<parameter><decl><type><name>u64</name></type> <name><name>Xi</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u128</name></type> <name><name>Htable</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>gcm_ghash_avx</name><parameter_list>(<parameter><decl><type><name>u64</name></type> <name><name>Xi</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u128</name></type> <name><name>Htable</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>inp</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_M_IX86</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GHASH_ASM_X86</name></cpp:macro></cpp:define>
<function_decl><type><name>void</name></type> <name>gcm_gmult_4bit_mmx</name><parameter_list>(<parameter><decl><type><name>u64</name></type> <name><name>Xi</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u128</name></type> <name><name>Htable</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>gcm_ghash_4bit_mmx</name><parameter_list>(<parameter><decl><type><name>u64</name></type> <name><name>Xi</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u128</name></type> <name><name>Htable</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>inp</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>gcm_gmult_4bit_x86</name><parameter_list>(<parameter><decl><type><name>u64</name></type> <name><name>Xi</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u128</name></type> <name><name>Htable</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>gcm_ghash_4bit_x86</name><parameter_list>(<parameter><decl><type><name>u64</name></type> <name><name>Xi</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u128</name></type> <name><name>Htable</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>inp</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__arm__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__arm</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_M_ARM64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"arm_arch.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__ARM_MAX_ARCH__</name><operator>&gt;=</operator><literal type="number">7</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GHASH_ASM_ARM</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PMULL_CAPABLE</name></cpp:macro> <cpp:value>(OPENSSL_armcap_P &amp; ARMV8_PMULL)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__arm__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__arm</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEON_CAPABLE</name></cpp:macro> <cpp:value>(OPENSSL_armcap_P &amp; ARMV7_NEON)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><name>void</name></type> <name>gcm_init_neon</name><parameter_list>(<parameter><decl><type><name>u128</name></type> <name><name>Htable</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u64</name></type> <name><name>Xi</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>gcm_gmult_neon</name><parameter_list>(<parameter><decl><type><name>u64</name></type> <name><name>Xi</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u128</name></type> <name><name>Htable</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>gcm_ghash_neon</name><parameter_list>(<parameter><decl><type><name>u64</name></type> <name><name>Xi</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u128</name></type> <name><name>Htable</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>inp</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>gcm_init_v8</name><parameter_list>(<parameter><decl><type><name>u128</name></type> <name><name>Htable</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u64</name></type> <name><name>Xi</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>gcm_gmult_v8</name><parameter_list>(<parameter><decl><type><name>u64</name></type> <name><name>Xi</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u128</name></type> <name><name>Htable</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>gcm_ghash_v8</name><parameter_list>(<parameter><decl><type><name>u64</name></type> <name><name>Xi</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u128</name></type> <name><name>Htable</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>inp</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__sparc__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__sparc</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"crypto/sparc_arch.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GHASH_ASM_SPARC</name></cpp:macro></cpp:define>
<function_decl><type><name>void</name></type> <name>gcm_init_vis3</name><parameter_list>(<parameter><decl><type><name>u128</name></type> <name><name>Htable</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u64</name></type> <name><name>Xi</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>gcm_gmult_vis3</name><parameter_list>(<parameter><decl><type><name>u64</name></type> <name><name>Xi</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u128</name></type> <name><name>Htable</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>gcm_ghash_vis3</name><parameter_list>(<parameter><decl><type><name>u64</name></type> <name><name>Xi</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u128</name></type> <name><name>Htable</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>inp</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_CPUID_OBJ</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__powerpc__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ppc__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_ARCH_PPC</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"crypto/ppc_arch.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GHASH_ASM_PPC</name></cpp:macro></cpp:define>
<function_decl><type><name>void</name></type> <name>gcm_init_p8</name><parameter_list>(<parameter><decl><type><name>u128</name></type> <name><name>Htable</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u64</name></type> <name><name>Xi</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>gcm_gmult_p8</name><parameter_list>(<parameter><decl><type><name>u64</name></type> <name><name>Xi</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u128</name></type> <name><name>Htable</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>gcm_ghash_p8</name><parameter_list>(<parameter><decl><type><name>u64</name></type> <name><name>Xi</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u128</name></type> <name><name>Htable</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>inp</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_CPUID_OBJ</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__riscv</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__riscv_xlen</name> <operator>==</operator> <literal type="number">64</literal></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"crypto/riscv_arch.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GHASH_ASM_RV64I</name></cpp:macro></cpp:define>
<function_decl><type><name>void</name></type> <name>gcm_init_rv64i_zbc</name><parameter_list>(<parameter><decl><type><name>u128</name></type> <name><name>Htable</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u64</name></type> <name><name>Xi</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>gcm_init_rv64i_zbc__zbb</name><parameter_list>(<parameter><decl><type><name>u128</name></type> <name><name>Htable</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u64</name></type> <name><name>Xi</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>gcm_init_rv64i_zbc__zbkb</name><parameter_list>(<parameter><decl><type><name>u128</name></type> <name><name>Htable</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u64</name></type> <name><name>Xi</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>gcm_gmult_rv64i_zbc</name><parameter_list>(<parameter><decl><type><name>u64</name></type> <name><name>Xi</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u128</name></type> <name><name>Htable</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>gcm_gmult_rv64i_zbc__zbkb</name><parameter_list>(<parameter><decl><type><name>u64</name></type> <name><name>Xi</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u128</name></type> <name><name>Htable</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>gcm_ghash_rv64i_zbc</name><parameter_list>(<parameter><decl><type><name>u64</name></type> <name><name>Xi</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u128</name></type> <name><name>Htable</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>inp</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>gcm_ghash_rv64i_zbc__zbkb</name><parameter_list>(<parameter><decl><type><name>u64</name></type> <name><name>Xi</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u128</name></type> <name><name>Htable</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>inp</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>gcm_init_rv64i_zvkb_zvbc</name><parameter_list>(<parameter><decl><type><name>u128</name></type> <name><name>Htable</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u64</name></type> <name><name>Xi</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>gcm_gmult_rv64i_zvkb_zvbc</name><parameter_list>(<parameter><decl><type><name>u64</name></type> <name><name>Xi</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u128</name></type> <name><name>Htable</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>gcm_ghash_rv64i_zvkb_zvbc</name><parameter_list>(<parameter><decl><type><name>u64</name></type> <name><name>Xi</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u128</name></type> <name><name>Htable</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>inp</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>gcm_init_rv64i_zvkg</name><parameter_list>(<parameter><decl><type><name>u128</name></type> <name><name>Htable</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u64</name></type> <name><name>Xi</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>gcm_init_rv64i_zvkg_zvkb</name><parameter_list>(<parameter><decl><type><name>u128</name></type> <name><name>Htable</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u64</name></type> <name><name>Xi</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>gcm_gmult_rv64i_zvkg</name><parameter_list>(<parameter><decl><type><name>u64</name></type> <name><name>Xi</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u128</name></type> <name><name>Htable</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>gcm_ghash_rv64i_zvkg</name><parameter_list>(<parameter><decl><type><name>u64</name></type> <name><name>Xi</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u128</name></type> <name><name>Htable</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>inp</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>void</name></type> <name>gcm_get_funcs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gcm_funcs_st</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ginit</name></name> <operator>=</operator> <name>gcm_init_4bit</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GHASH_ASM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>gmult</name></name> <operator>=</operator> <name>gcm_gmult_4bit</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>gmult</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GHASH_ASM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_SMALL_FOOTPRINT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ghash</name></name> <operator>=</operator> <name>gcm_ghash_4bit</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ghash</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GHASH_ASM_X86_OR_64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GHASH_ASM_X86</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_IA32_SSE2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>OPENSSL_ia32cap_P</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>OPENSSL_ia32cap_P</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">22</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x41</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x41</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ginit</name></name> <operator>=</operator> <name>gcm_init_avx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>gmult</name></name> <operator>=</operator> <name>gcm_gmult_avx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ghash</name></name> <operator>=</operator> <name>gcm_ghash_avx</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ginit</name></name> <operator>=</operator> <name>gcm_init_clmul</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>gmult</name></name> <operator>=</operator> <name>gcm_gmult_clmul</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ghash</name></name> <operator>=</operator> <name>gcm_ghash_clmul</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GHASH_ASM_X86</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_IA32_SSE2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>OPENSSL_ia32cap_P</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">25</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>gmult</name></name> <operator>=</operator> <name>gcm_gmult_4bit_mmx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ghash</name></name> <operator>=</operator> <name>gcm_ghash_4bit_mmx</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name><name>OPENSSL_ia32cap_P</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>gmult</name></name> <operator>=</operator> <name>gcm_gmult_4bit_mmx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ghash</name></name> <operator>=</operator> <name>gcm_ghash_4bit_mmx</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>gmult</name></name> <operator>=</operator> <name>gcm_gmult_4bit_x86</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ghash</name></name> <operator>=</operator> <name>gcm_ghash_4bit_x86</name></expr>;</expr_stmt>
<return>return;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>gmult</name></name> <operator>=</operator> <name>gcm_gmult_4bit</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ghash</name></name> <operator>=</operator> <name>gcm_ghash_4bit</name></expr>;</expr_stmt>
<return>return;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GHASH_ASM_ARM</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>gmult</name></name> <operator>=</operator> <name>gcm_gmult_4bit</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ghash</name></name> <operator>=</operator> <name>gcm_ghash_4bit</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PMULL_CAPABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>PMULL_CAPABLE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ginit</name></name> <operator>=</operator> <operator>(</operator><name>gcm_init_fn</name><operator>)</operator><name>gcm_init_v8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>gmult</name></name> <operator>=</operator> <name>gcm_gmult_v8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ghash</name></name> <operator>=</operator> <name>gcm_ghash_v8</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NEON_CAPABLE</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<if_stmt><if>if <condition>(<expr><name>NEON_CAPABLE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ginit</name></name> <operator>=</operator> <name>gcm_init_neon</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>gmult</name></name> <operator>=</operator> <name>gcm_gmult_neon</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ghash</name></name> <operator>=</operator> <name>gcm_ghash_neon</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GHASH_ASM_SPARC</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>gmult</name></name> <operator>=</operator> <name>gcm_gmult_4bit</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ghash</name></name> <operator>=</operator> <name>gcm_ghash_4bit</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>OPENSSL_sparcv9cap_P</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name>SPARCV9_VIS3</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ginit</name></name> <operator>=</operator> <name>gcm_init_vis3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>gmult</name></name> <operator>=</operator> <name>gcm_gmult_vis3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ghash</name></name> <operator>=</operator> <name>gcm_ghash_vis3</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GHASH_ASM_PPC</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<if_stmt><if>if <condition>(<expr><name>OPENSSL_ppccap_P</name> <operator>&amp;</operator> <name>PPC_CRYPTO207</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ginit</name></name> <operator>=</operator> <name>gcm_init_p8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>gmult</name></name> <operator>=</operator> <name>gcm_gmult_p8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ghash</name></name> <operator>=</operator> <name>gcm_ghash_p8</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GHASH_ASM_RV64I</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>gmult</name></name> <operator>=</operator> <name>gcm_gmult_4bit</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ghash</name></name> <operator>=</operator> <name>gcm_ghash_4bit</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RISCV_HAS_ZVKG</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>riscv_vlen</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RISCV_HAS_ZVKB</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ginit</name></name> <operator>=</operator> <name>gcm_init_rv64i_zvkg_zvkb</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ginit</name></name> <operator>=</operator> <name>gcm_init_rv64i_zvkg</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>gmult</name></name> <operator>=</operator> <name>gcm_gmult_rv64i_zvkg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ghash</name></name> <operator>=</operator> <name>gcm_ghash_rv64i_zvkg</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>RISCV_HAS_ZVKB</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>RISCV_HAS_ZVBC</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>riscv_vlen</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ginit</name></name> <operator>=</operator> <name>gcm_init_rv64i_zvkb_zvbc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>gmult</name></name> <operator>=</operator> <name>gcm_gmult_rv64i_zvkb_zvbc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ghash</name></name> <operator>=</operator> <name>gcm_ghash_rv64i_zvkb_zvbc</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>RISCV_HAS_ZBC</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RISCV_HAS_ZBKB</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ginit</name></name> <operator>=</operator> <name>gcm_init_rv64i_zbc__zbkb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>gmult</name></name> <operator>=</operator> <name>gcm_gmult_rv64i_zbc__zbkb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ghash</name></name> <operator>=</operator> <name>gcm_ghash_rv64i_zbc__zbkb</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>RISCV_HAS_ZBB</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ginit</name></name> <operator>=</operator> <name>gcm_init_rv64i_zbc__zbb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>gmult</name></name> <operator>=</operator> <name>gcm_gmult_rv64i_zbc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ghash</name></name> <operator>=</operator> <name>gcm_ghash_rv64i_zbc</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ginit</name></name> <operator>=</operator> <name>gcm_init_rv64i_zbc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>gmult</name></name> <operator>=</operator> <name>gcm_gmult_rv64i_zbc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ghash</name></name> <operator>=</operator> <name>gcm_ghash_rv64i_zbc</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GHASH_ASM</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>gmult</name></name> <operator>=</operator> <name>gcm_gmult_4bit</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ghash</name></name> <operator>=</operator> <name>gcm_ghash_4bit</name></expr>;</expr_stmt>
<return>return;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ossl_gcm_init_4bit</name><parameter_list>(<parameter><decl><type><name>u128</name></type> <name><name>Htable</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u64</name></type> <name><name>H</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gcm_funcs_st</name></name></type> <name>funcs</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>gcm_get_funcs</name><argument_list>(<argument><expr><operator>&amp;</operator><name>funcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>funcs</name><operator>.</operator><name>ginit</name></name><argument_list>(<argument><expr><name>Htable</name></expr></argument>, <argument><expr><name>H</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ossl_gcm_gmult_4bit</name><parameter_list>(<parameter><decl><type><name>u64</name></type> <name><name>Xi</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u128</name></type> <name><name>Htable</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gcm_funcs_st</name></name></type> <name>funcs</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>gcm_get_funcs</name><argument_list>(<argument><expr><operator>&amp;</operator><name>funcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>funcs</name><operator>.</operator><name>gmult</name></name><argument_list>(<argument><expr><name>Xi</name></expr></argument>, <argument><expr><name>Htable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ossl_gcm_ghash_4bit</name><parameter_list>(<parameter><decl><type><name>u64</name></type> <name><name>Xi</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u128</name></type> <name><name>Htable</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>inp</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gcm_funcs_st</name></name></type> <name>funcs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name><name>tmp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>gcm_get_funcs</name><argument_list>(<argument><expr><operator>&amp;</operator><name>funcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>funcs</name><operator>.</operator><name>ghash</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>funcs</name><operator>.</operator><name>ghash</name></name><argument_list>(<argument><expr><name>Xi</name></expr></argument>, <argument><expr><name>Htable</name></expr></argument>, <argument><expr><name>inp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">16</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>inp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Xi</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^=</operator> <name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Xi</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^=</operator> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>funcs</name><operator>.</operator><name>gmult</name></name><argument_list>(<argument><expr><name>Xi</name></expr></argument>, <argument><expr><name>Htable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>CRYPTO_gcm128_init</name><parameter_list>(<parameter><decl><type><name>GCM128_CONTEXT</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>block128_f</name></type> <name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>DECLARE_IS_ENDIAN</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>block</name></name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name>block</name>) <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>H</name><operator>.</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>H</name><operator>.</operator><name>c</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>IS_LITTLE_ENDIAN</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BSWAP8</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>H</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>BSWAP8</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>H</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>H</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>BSWAP8</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>H</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>H</name><operator>.</operator><name>c</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name>hi</name></decl>, <decl><type ref="prev"/><name>lo</name></decl>;</decl_stmt>
<expr_stmt><expr><name>hi</name> <operator>=</operator> <operator>(</operator><name>u64</name><operator>)</operator><call><name>GETU32</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">32</literal> <operator>|</operator> <call><name>GETU32</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lo</name> <operator>=</operator> <operator>(</operator><name>u64</name><operator>)</operator><call><name>GETU32</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">32</literal> <operator>|</operator> <call><name>GETU32</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>H</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>hi</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>H</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>lo</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>gcm_get_funcs</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>funcs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>funcs</name><operator>.</operator><name>ginit</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Htable</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>H</name><operator>.</operator><name>u</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>CRYPTO_gcm128_setiv</name><parameter_list>(<parameter><decl><type><name>GCM128_CONTEXT</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>DECLARE_IS_ENDIAN</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ctr</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>len</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>len</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ares</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mres</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>c</name></name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ctr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name>len0</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^=</operator> <name><name>iv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>GCM_MUL</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>iv</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^=</operator> <name><name>iv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>GCM_MUL</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len0</name> <operator>&lt;&lt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>IS_LITTLE_ENDIAN</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BSWAP8</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^=</operator> <call><name>BSWAP8</name><argument_list>(<argument><expr><name>len0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>^=</operator> <operator>(</operator><name>u8</name><operator>)</operator><operator>(</operator><name>len0</name> <operator>&gt;&gt;</operator> <literal type="number">56</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>^=</operator> <operator>(</operator><name>u8</name><operator>)</operator><operator>(</operator><name>len0</name> <operator>&gt;&gt;</operator> <literal type="number">48</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>^=</operator> <operator>(</operator><name>u8</name><operator>)</operator><operator>(</operator><name>len0</name> <operator>&gt;&gt;</operator> <literal type="number">40</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>^=</operator> <operator>(</operator><name>u8</name><operator>)</operator><operator>(</operator><name>len0</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>^=</operator> <operator>(</operator><name>u8</name><operator>)</operator><operator>(</operator><name>len0</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>^=</operator> <operator>(</operator><name>u8</name><operator>)</operator><operator>(</operator><name>len0</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>^=</operator> <operator>(</operator><name>u8</name><operator>)</operator><operator>(</operator><name>len0</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>^=</operator> <operator>(</operator><name>u8</name><operator>)</operator><operator>(</operator><name>len0</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^=</operator> <name>len0</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>GCM_MUL</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>IS_LITTLE_ENDIAN</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BSWAP4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ctr</name> <operator>=</operator> <call><name>BSWAP4</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>ctr</name> <operator>=</operator> <call><name>GETU32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>c</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ctr</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>ctx</name><operator>-&gt;</operator><name>block</name></name>) <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>EK0</name><operator>.</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>ctr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>IS_LITTLE_ENDIAN</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BSWAP4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>BSWAP4</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>PUTU32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>c</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>ctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>ctr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>CRYPTO_gcm128_aad</name><parameter_list>(<parameter><decl><type><name>GCM128_CONTEXT</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>aad</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name>alen</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>len</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>len</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>alen</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>alen</name> <operator>&gt;</operator> <operator>(</operator><call><name>U64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">61</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>alen</name> <operator>&lt;</operator> <name>len</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>len</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>alen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ares</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>n</name> <operator>&amp;&amp;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>c</name><index>[<expr><name>n</name></expr>]</index></name> <operator>^=</operator> <operator>*</operator><operator>(</operator><name>aad</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>GCM_MUL</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ares</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GHASH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <operator>(</operator><name>len</name> <operator>&amp;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">16</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GHASH</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>aad</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>aad</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<while>while <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^=</operator> <name><name>aad</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>GCM_MUL</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>aad</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>len</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^=</operator> <name><name>aad</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ares</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>CRYPTO_gcm128_encrypt</name><parameter_list>(<parameter><decl><type><name>GCM128_CONTEXT</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>DECLARE_IS_ENDIAN</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>ctr</name></decl>, <decl><type ref="prev"/><name>mres</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name>mlen</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>len</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block128_f</name></type> <name>block</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>block</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>key</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>mlen</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mlen</name> <operator>&gt;</operator> <operator>(</operator><operator>(</operator><call><name>U64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">36</literal><operator>)</operator> <operator>-</operator> <literal type="number">32</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>mlen</name> <operator>&lt;</operator> <name>len</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>len</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>mlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mres</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>mres</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>ares</name></name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GHASH</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_SMALL_FOOTPRINT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GCM_MUL</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ares</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xn</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>c</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mres</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>GCM_MUL</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ares</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>IS_LITTLE_ENDIAN</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BSWAP4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ctr</name> <operator>=</operator> <call><name>BSWAP4</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>ctr</name> <operator>=</operator> <call><name>GETU32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>c</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ctr</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>mres</name> <operator>%</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_SMALL_FOOTPRINT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><literal type="number">16</literal> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GHASH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<while>while <condition>(<expr><name>n</name> <operator>&amp;&amp;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xn</name><index>[<expr><name>mres</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name>in</name><operator>++</operator><operator>)</operator> <operator>^</operator> <name><name>ctx</name><operator>-&gt;</operator><name>EKi</name><operator>.</operator><name>c</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GHASH</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xn</name></name></expr></argument>, <argument><expr><name>mres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mres</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mres</name></name> <operator>=</operator> <name>mres</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<while>while <condition>(<expr><name>n</name> <operator>&amp;&amp;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>c</name><index>[<expr><name>n</name></expr>]</index></name> <operator>^=</operator> <operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name>in</name><operator>++</operator><operator>)</operator> <operator>^</operator> <name><name>ctx</name><operator>-&gt;</operator><name>EKi</name><operator>.</operator><name>c</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GCM_MUL</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mres</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mres</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STRICT_ALIGNMENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>in</name> <operator>|</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>out</name><operator>)</operator> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GHASH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <name>mres</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GHASH</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xn</name></name></expr></argument>, <argument><expr><name>mres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mres</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GHASH_CHUNK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<while>while <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>GHASH_CHUNK</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><name>GHASH_CHUNK</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>j</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t_aX</name> <modifier>*</modifier></type><name>out_t</name> <init>= <expr><operator>(</operator><name>size_t_aX</name> <operator>*</operator><operator>)</operator><name>out</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t_aX</name> <modifier>*</modifier></type><name>in_t</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>size_t_aX</name> <operator>*</operator><operator>)</operator><name>in</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name>block</name>) <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>EKi</name><operator>.</operator><name>c</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>ctr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>IS_LITTLE_ENDIAN</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BSWAP4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>BSWAP4</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>PUTU32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>c</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>ctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>ctr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out_t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>in_t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>ctx</name><operator>-&gt;</operator><name>EKi</name><operator>.</operator><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>out</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>GHASH</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>out</name> <operator>-</operator> <name>GHASH_CHUNK</name></expr></argument>, <argument><expr><name>GHASH_CHUNK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>GHASH_CHUNK</name></expr>;</expr_stmt>
</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <operator>(</operator><name>len</name> <operator>&amp;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">16</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t_aX</name> <modifier>*</modifier></type><name>out_t</name> <init>= <expr><operator>(</operator><name>size_t_aX</name> <operator>*</operator><operator>)</operator><name>out</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t_aX</name> <modifier>*</modifier></type><name>in_t</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>size_t_aX</name> <operator>*</operator><operator>)</operator><name>in</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name>block</name>) <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>EKi</name><operator>.</operator><name>c</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>ctr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>IS_LITTLE_ENDIAN</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BSWAP4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>BSWAP4</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>PUTU32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>c</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>ctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>ctr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out_t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>in_t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>ctx</name><operator>-&gt;</operator><name>EKi</name><operator>.</operator><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>out</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>GHASH</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>out</name> <operator>-</operator> <name>j</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<while>while <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name> <modifier>*</modifier></type><name>out_t</name> <init>= <expr><operator>(</operator><name>size_t</name> <operator>*</operator><operator>)</operator><name>out</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name> <modifier>*</modifier></type><name>in_t</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>size_t</name> <operator>*</operator><operator>)</operator><name>in</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name>block</name>) <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>EKi</name><operator>.</operator><name>c</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>ctr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>IS_LITTLE_ENDIAN</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BSWAP4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>BSWAP4</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>PUTU32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>c</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>ctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>ctr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^=</operator> <name><name>out_t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>in_t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>ctx</name><operator>-&gt;</operator><name>EKi</name><operator>.</operator><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>GCM_MUL</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name>block</name>) <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>EKi</name><operator>.</operator><name>c</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>ctr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>IS_LITTLE_ENDIAN</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BSWAP4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>BSWAP4</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>PUTU32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>c</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>ctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>ctr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GHASH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<while>while <condition>(<expr><name>len</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xn</name><index>[<expr><name>mres</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>out</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><name>n</name></expr>]</index></name> <operator>^</operator> <name><name>ctx</name><operator>-&gt;</operator><name>EKi</name><operator>.</operator><name>c</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>
</block_content>}</block></while>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<while>while <condition>(<expr><name>len</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>c</name><index>[<expr><name>n</name></expr>]</index></name> <operator>^=</operator> <name><name>out</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><name>n</name></expr>]</index></name> <operator>^</operator> <name><name>ctx</name><operator>-&gt;</operator><name>EKi</name><operator>.</operator><name>c</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>mres</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mres</name></name> <operator>=</operator> <name>mres</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block> while <condition>(<expr><literal type="number">0</literal></expr>)</condition>;</do>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name>block</name>) <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>EKi</name><operator>.</operator><name>c</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>ctr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>IS_LITTLE_ENDIAN</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BSWAP4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>BSWAP4</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>PUTU32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>c</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>ctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>ctr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GHASH</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_SMALL_FOOTPRINT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xn</name><index>[<expr><name>mres</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>ctx</name><operator>-&gt;</operator><name>EKi</name><operator>.</operator><name>c</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mres</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xn</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GHASH</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xn</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xn</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mres</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>c</name><index>[<expr><name>n</name></expr>]</index></name> <operator>^=</operator> <name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>ctx</name><operator>-&gt;</operator><name>EKi</name><operator>.</operator><name>c</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mres</name> <operator>=</operator> <name>n</name> <operator>=</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>GCM_MUL</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mres</name></name> <operator>=</operator> <name>mres</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>CRYPTO_gcm128_decrypt</name><parameter_list>(<parameter><decl><type><name>GCM128_CONTEXT</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>DECLARE_IS_ENDIAN</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>ctr</name></decl>, <decl><type ref="prev"/><name>mres</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name>mlen</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>len</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block128_f</name></type> <name>block</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>block</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>key</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>mlen</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mlen</name> <operator>&gt;</operator> <operator>(</operator><operator>(</operator><call><name>U64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">36</literal><operator>)</operator> <operator>-</operator> <literal type="number">32</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>mlen</name> <operator>&lt;</operator> <name>len</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>len</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>mlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mres</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>mres</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>ares</name></name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GHASH</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_SMALL_FOOTPRINT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GCM_MUL</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ares</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xn</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>c</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mres</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>GCM_MUL</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ares</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>IS_LITTLE_ENDIAN</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BSWAP4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ctr</name> <operator>=</operator> <call><name>BSWAP4</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>ctr</name> <operator>=</operator> <call><name>GETU32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>c</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ctr</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>mres</name> <operator>%</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_SMALL_FOOTPRINT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><literal type="number">16</literal> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GHASH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<while>while <condition>(<expr><name>n</name> <operator>&amp;&amp;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>Xn</name><index>[<expr><name>mres</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>in</name><operator>++</operator><operator>)</operator><operator>)</operator> <operator>^</operator> <name><name>ctx</name><operator>-&gt;</operator><name>EKi</name><operator>.</operator><name>c</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GHASH</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xn</name></name></expr></argument>, <argument><expr><name>mres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mres</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mres</name></name> <operator>=</operator> <name>mres</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<while>while <condition>(<expr><name>n</name> <operator>&amp;&amp;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>u8</name></type> <name>c</name> <init>= <expr><operator>*</operator><operator>(</operator><name>in</name><operator>++</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name>c</name> <operator>^</operator> <name><name>ctx</name><operator>-&gt;</operator><name>EKi</name><operator>.</operator><name>c</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>c</name><index>[<expr><name>n</name></expr>]</index></name> <operator>^=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GCM_MUL</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mres</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mres</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STRICT_ALIGNMENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>in</name> <operator>|</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>out</name><operator>)</operator> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GHASH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <name>mres</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GHASH</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xn</name></name></expr></argument>, <argument><expr><name>mres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mres</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GHASH_CHUNK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<while>while <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>GHASH_CHUNK</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><name>GHASH_CHUNK</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GHASH</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>GHASH_CHUNK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>j</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t_aX</name> <modifier>*</modifier></type><name>out_t</name> <init>= <expr><operator>(</operator><name>size_t_aX</name> <operator>*</operator><operator>)</operator><name>out</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t_aX</name> <modifier>*</modifier></type><name>in_t</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>size_t_aX</name> <operator>*</operator><operator>)</operator><name>in</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name>block</name>) <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>EKi</name><operator>.</operator><name>c</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>ctr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>IS_LITTLE_ENDIAN</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BSWAP4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>BSWAP4</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>PUTU32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>c</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>ctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>ctr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out_t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>in_t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>ctx</name><operator>-&gt;</operator><name>EKi</name><operator>.</operator><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>out</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>GHASH_CHUNK</name></expr>;</expr_stmt>
</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <operator>(</operator><name>len</name> <operator>&amp;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">16</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GHASH</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t_aX</name> <modifier>*</modifier></type><name>out_t</name> <init>= <expr><operator>(</operator><name>size_t_aX</name> <operator>*</operator><operator>)</operator><name>out</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t_aX</name> <modifier>*</modifier></type><name>in_t</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>size_t_aX</name> <operator>*</operator><operator>)</operator><name>in</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name>block</name>) <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>EKi</name><operator>.</operator><name>c</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>ctr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>IS_LITTLE_ENDIAN</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BSWAP4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>BSWAP4</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>PUTU32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>c</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>ctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>ctr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out_t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>in_t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>ctx</name><operator>-&gt;</operator><name>EKi</name><operator>.</operator><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>out</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<while>while <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name> <modifier>*</modifier></type><name>out_t</name> <init>= <expr><operator>(</operator><name>size_t</name> <operator>*</operator><operator>)</operator><name>out</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name> <modifier>*</modifier></type><name>in_t</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>size_t</name> <operator>*</operator><operator>)</operator><name>in</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name>block</name>) <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>EKi</name><operator>.</operator><name>c</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>ctr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>IS_LITTLE_ENDIAN</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BSWAP4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>BSWAP4</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>PUTU32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>c</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>ctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>ctr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>c</name> <init>= <expr><name><name>in_t</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>out_t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>c</name> <operator>^</operator> <name><name>ctx</name><operator>-&gt;</operator><name>EKi</name><operator>.</operator><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>GCM_MUL</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name>block</name>) <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>EKi</name><operator>.</operator><name>c</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>ctr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>IS_LITTLE_ENDIAN</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BSWAP4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>BSWAP4</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>PUTU32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>c</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>ctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>ctr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GHASH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<while>while <condition>(<expr><name>len</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>Xn</name><index>[<expr><name>mres</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><name>n</name></expr>]</index></name><operator>)</operator> <operator>^</operator> <name><name>ctx</name><operator>-&gt;</operator><name>EKi</name><operator>.</operator><name>c</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>
</block_content>}</block></while>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<while>while <condition>(<expr><name>len</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>u8</name></type> <name>c</name> <init>= <expr><name><name>in</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>c</name><index>[<expr><name>n</name></expr>]</index></name> <operator>^=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>c</name> <operator>^</operator> <name><name>ctx</name><operator>-&gt;</operator><name>EKi</name><operator>.</operator><name>c</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>mres</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mres</name></name> <operator>=</operator> <name>mres</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block> while <condition>(<expr><literal type="number">0</literal></expr>)</condition>;</do>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>u8</name></type> <name>c</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name>block</name>) <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>EKi</name><operator>.</operator><name>c</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>ctr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>IS_LITTLE_ENDIAN</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BSWAP4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>BSWAP4</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>PUTU32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>c</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>ctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>ctr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GHASH</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_SMALL_FOOTPRINT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>Xn</name><index>[<expr><name>mres</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name> <operator>=</operator> <name><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>^</operator> <name><name>ctx</name><operator>-&gt;</operator><name>EKi</name><operator>.</operator><name>c</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mres</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xn</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GHASH</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xn</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xn</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mres</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>in</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>c</name> <operator>^</operator> <name><name>ctx</name><operator>-&gt;</operator><name>EKi</name><operator>.</operator><name>c</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>c</name><index>[<expr><name>n</name></expr>]</index></name> <operator>^=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mres</name> <operator>=</operator> <name>n</name> <operator>=</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>GCM_MUL</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mres</name></name> <operator>=</operator> <name>mres</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>CRYPTO_gcm128_encrypt_ctr32</name><parameter_list>(<parameter><decl><type><name>GCM128_CONTEXT</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>ctr128_f</name></type> <name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_SMALL_FOOTPRINT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>CRYPTO_gcm128_encrypt</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>DECLARE_IS_ENDIAN</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>ctr</name></decl>, <decl><type ref="prev"/><name>mres</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name>mlen</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>len</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>key</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>mlen</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mlen</name> <operator>&gt;</operator> <operator>(</operator><operator>(</operator><call><name>U64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">36</literal><operator>)</operator> <operator>-</operator> <literal type="number">32</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>mlen</name> <operator>&lt;</operator> <name>len</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>len</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>mlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mres</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>mres</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>ares</name></name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GHASH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GCM_MUL</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ares</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xn</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>c</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mres</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>GCM_MUL</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ares</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>IS_LITTLE_ENDIAN</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BSWAP4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ctr</name> <operator>=</operator> <call><name>BSWAP4</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>ctr</name> <operator>=</operator> <call><name>GETU32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>c</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ctr</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>mres</name> <operator>%</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GHASH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<while>while <condition>(<expr><name>n</name> <operator>&amp;&amp;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xn</name><index>[<expr><name>mres</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name>in</name><operator>++</operator><operator>)</operator> <operator>^</operator> <name><name>ctx</name><operator>-&gt;</operator><name>EKi</name><operator>.</operator><name>c</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GHASH</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xn</name></name></expr></argument>, <argument><expr><name>mres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mres</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mres</name></name> <operator>=</operator> <name>mres</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<while>while <condition>(<expr><name>n</name> <operator>&amp;&amp;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>c</name><index>[<expr><name>n</name></expr>]</index></name> <operator>^=</operator> <operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name>in</name><operator>++</operator><operator>)</operator> <operator>^</operator> <name><name>ctx</name><operator>-&gt;</operator><name>EKi</name><operator>.</operator><name>c</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GCM_MUL</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mres</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mres</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GHASH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <name>mres</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GHASH</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xn</name></name></expr></argument>, <argument><expr><name>mres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mres</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GHASH_CHUNK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<while>while <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>GHASH_CHUNK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name>stream</name>) <argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>GHASH_CHUNK</name> <operator>/</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ctr</name> <operator>+=</operator> <name>GHASH_CHUNK</name> <operator>/</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>IS_LITTLE_ENDIAN</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BSWAP4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>BSWAP4</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>PUTU32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>c</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>ctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>ctr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>GHASH</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>GHASH_CHUNK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>+=</operator> <name>GHASH_CHUNK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> <operator>+=</operator> <name>GHASH_CHUNK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>GHASH_CHUNK</name></expr>;</expr_stmt>
</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <operator>(</operator><name>len</name> <operator>&amp;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">16</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>/</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name>stream</name>) <argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ctr</name> <operator>+=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>j</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>IS_LITTLE_ENDIAN</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BSWAP4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>BSWAP4</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>PUTU32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>c</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>ctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>ctr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>in</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GHASH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>GHASH</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<while>while <condition>(<expr><name>j</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^=</operator> <name><name>out</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>GCM_MUL</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>ctx</name><operator>-&gt;</operator><name>block</name></name>) <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>EKi</name><operator>.</operator><name>c</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>ctr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>IS_LITTLE_ENDIAN</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BSWAP4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>BSWAP4</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>PUTU32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>c</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>ctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>ctr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<while>while <condition>(<expr><name>len</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GHASH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xn</name><index>[<expr><name>mres</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>out</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><name>n</name></expr>]</index></name> <operator>^</operator> <name><name>ctx</name><operator>-&gt;</operator><name>EKi</name><operator>.</operator><name>c</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>c</name><index>[<expr><name>mres</name><operator>++</operator></expr>]</index></name> <operator>^=</operator> <name><name>out</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><name>n</name></expr>]</index></name> <operator>^</operator> <name><name>ctx</name><operator>-&gt;</operator><name>EKi</name><operator>.</operator><name>c</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mres</name></name> <operator>=</operator> <name>mres</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>CRYPTO_gcm128_decrypt_ctr32</name><parameter_list>(<parameter><decl><type><name>GCM128_CONTEXT</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>ctr128_f</name></type> <name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_SMALL_FOOTPRINT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>CRYPTO_gcm128_decrypt</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>DECLARE_IS_ENDIAN</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>ctr</name></decl>, <decl><type ref="prev"/><name>mres</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name>mlen</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>len</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>key</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>mlen</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mlen</name> <operator>&gt;</operator> <operator>(</operator><operator>(</operator><call><name>U64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">36</literal><operator>)</operator> <operator>-</operator> <literal type="number">32</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>mlen</name> <operator>&lt;</operator> <name>len</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>len</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>mlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mres</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>mres</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>ares</name></name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GHASH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GCM_MUL</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ares</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xn</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>c</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mres</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>GCM_MUL</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ares</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>IS_LITTLE_ENDIAN</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BSWAP4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ctr</name> <operator>=</operator> <call><name>BSWAP4</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>ctr</name> <operator>=</operator> <call><name>GETU32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>c</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ctr</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>mres</name> <operator>%</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GHASH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<while>while <condition>(<expr><name>n</name> <operator>&amp;&amp;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>Xn</name><index>[<expr><name>mres</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>in</name><operator>++</operator><operator>)</operator><operator>)</operator> <operator>^</operator> <name><name>ctx</name><operator>-&gt;</operator><name>EKi</name><operator>.</operator><name>c</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GHASH</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xn</name></name></expr></argument>, <argument><expr><name>mres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mres</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mres</name></name> <operator>=</operator> <name>mres</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<while>while <condition>(<expr><name>n</name> <operator>&amp;&amp;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>u8</name></type> <name>c</name> <init>= <expr><operator>*</operator><operator>(</operator><name>in</name><operator>++</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name>c</name> <operator>^</operator> <name><name>ctx</name><operator>-&gt;</operator><name>EKi</name><operator>.</operator><name>c</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>c</name><index>[<expr><name>n</name></expr>]</index></name> <operator>^=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GCM_MUL</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mres</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mres</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GHASH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <name>mres</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GHASH</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xn</name></name></expr></argument>, <argument><expr><name>mres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mres</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GHASH_CHUNK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<while>while <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>GHASH_CHUNK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GHASH</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>GHASH_CHUNK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name>stream</name>) <argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>GHASH_CHUNK</name> <operator>/</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ctr</name> <operator>+=</operator> <name>GHASH_CHUNK</name> <operator>/</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>IS_LITTLE_ENDIAN</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BSWAP4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>BSWAP4</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>PUTU32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>c</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>ctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>ctr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>out</name> <operator>+=</operator> <name>GHASH_CHUNK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> <operator>+=</operator> <name>GHASH_CHUNK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>GHASH_CHUNK</name></expr>;</expr_stmt>
</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <operator>(</operator><name>len</name> <operator>&amp;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">16</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>/</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GHASH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>GHASH</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<while>while <condition>(<expr><name>j</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>k</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>c</name><index>[<expr><name>k</name></expr>]</index></name> <operator>^=</operator> <name><name>in</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>GCM_MUL</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name> <operator>/</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call>(<modifier>*</modifier><name>stream</name>) <argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ctr</name> <operator>+=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>j</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>IS_LITTLE_ENDIAN</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BSWAP4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>BSWAP4</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>PUTU32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>c</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>ctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>ctr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>out</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>ctx</name><operator>-&gt;</operator><name>block</name></name>) <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>EKi</name><operator>.</operator><name>c</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>ctr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>IS_LITTLE_ENDIAN</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BSWAP4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>BSWAP4</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>PUTU32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>c</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>ctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Yi</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>ctr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<while>while <condition>(<expr><name>len</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GHASH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>Xn</name><index>[<expr><name>mres</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><name>n</name></expr>]</index></name><operator>)</operator> <operator>^</operator> <name><name>ctx</name><operator>-&gt;</operator><name>EKi</name><operator>.</operator><name>c</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>u8</name></type> <name>c</name> <init>= <expr><name><name>in</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>c</name><index>[<expr><name>mres</name><operator>++</operator></expr>]</index></name> <operator>^=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>c</name> <operator>^</operator> <name><name>ctx</name><operator>-&gt;</operator><name>EKi</name><operator>.</operator><name>c</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mres</name></name> <operator>=</operator> <name>mres</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>CRYPTO_gcm128_finish</name><parameter_list>(<parameter><decl><type><name>GCM128_CONTEXT</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>DECLARE_IS_ENDIAN</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name>alen</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>len</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name>clen</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>len</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GHASH</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_SMALL_FOOTPRINT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>u128</name></type> <name>bitlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mres</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>mres</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>mres</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>blocks</name> <init>= <expr><operator>(</operator><name>mres</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&amp;</operator> <operator>-</operator><literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xn</name></name> <operator>+</operator> <name>mres</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>blocks</name> <operator>-</operator> <name>mres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mres</name> <operator>=</operator> <name>blocks</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mres</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xn</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GHASH</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xn</name></name></expr></argument>, <argument><expr><name>mres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mres</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>ares</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GCM_MUL</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>mres</name></name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ares</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>GCM_MUL</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>IS_LITTLE_ENDIAN</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BSWAP8</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>alen</name> <operator>=</operator> <call><name>BSWAP8</name><argument_list>(<argument><expr><name>alen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>clen</name> <operator>=</operator> <call><name>BSWAP8</name><argument_list>(<argument><expr><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>len</name><operator>.</operator><name>c</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>len</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>alen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>len</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>clen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>alen</name> <operator>=</operator> <operator>(</operator><name>u64</name><operator>)</operator><call><name>GETU32</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">32</literal> <operator>|</operator> <call><name>GETU32</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>clen</name> <operator>=</operator> <operator>(</operator><name>u64</name><operator>)</operator><call><name>GETU32</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">32</literal> <operator>|</operator> <call><name>GETU32</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GHASH</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_SMALL_FOOTPRINT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>bitlen</name><operator>.</operator><name>hi</name></name> <operator>=</operator> <name>alen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bitlen</name><operator>.</operator><name>lo</name></name> <operator>=</operator> <name>clen</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xn</name></name> <operator>+</operator> <name>mres</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitlen</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bitlen</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mres</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bitlen</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GHASH</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xn</name></name></expr></argument>, <argument><expr><name>mres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^=</operator> <name>alen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^=</operator> <name>clen</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GCM_MUL</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>EK0</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>EK0</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tag</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>CRYPTO_memcmp</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>c</name></name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>CRYPTO_gcm128_tag</name><parameter_list>(<parameter><decl><type><name>GCM128_CONTEXT</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CRYPTO_gcm128_finish</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>c</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name>len</name> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>c</name></name></expr></argument>)</argument_list></sizeof></expr> ?</condition><then> <expr><name>len</name></expr> </then><else>: <expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>Xi</name><operator>.</operator><name>c</name></name></expr></argument>)</argument_list></sizeof></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>GCM128_CONTEXT</name> <modifier>*</modifier></type><name>CRYPTO_gcm128_new</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>block128_f</name></type> <name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GCM128_CONTEXT</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>OPENSSL_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CRYPTO_gcm128_init</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>CRYPTO_gcm128_release</name><parameter_list>(<parameter><decl><type><name>GCM128_CONTEXT</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>OPENSSL_clear_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function><expr><name>s</name></expr></unit>
