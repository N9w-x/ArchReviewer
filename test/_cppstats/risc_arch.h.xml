<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/xiaoyu/github/ArchReviewer/test/_cppstats/risc_arch.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RISCV_DEFINE_CAP</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>, <parameter><type><name>INDEX</name></type></parameter>, <parameter><type><name>BIT_INDEX</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>+1</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>extern</specifier> <name>uint32_t</name></type> <name><name>OPENSSL_riscvcap_P</name><index>[ <expr><operator>(</operator><operator>(</operator>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"riscv_arch.def"</cpp:file></cpp:include>
<operator>)</operator> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr> ]</index></name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_RISCVCAP_IMPL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RISCV_DEFINE_CAP</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>, <parameter><type><name>INDEX</name></type></parameter>, <parameter><type><name>BIT_INDEX</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>+1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>OPENSSL_riscvcap_P</name><index>[ <expr><operator>(</operator><operator>(</operator>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"riscv_arch.def"</cpp:file></cpp:include>
<operator>)</operator> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr> ]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RISCV_DEFINE_CAP</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>, <parameter><type><name>INDEX</name></type></parameter>, <parameter><type><name>BIT_INDEX</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static inline int RISCV_HAS_##NAME(void) { return (OPENSSL_riscvcap_P[INDEX] &amp; (1 &lt;&lt; BIT_INDEX)) != 0; }</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"riscv_arch.def"</cpp:file></cpp:include>
<struct>struct <name>RISCV_capability_s</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>bit_offset</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RISCV_DEFINE_CAP</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>, <parameter><type><name>INDEX</name></type></parameter>, <parameter><type><name>BIT_INDEX</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>+1</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>RISCV_capability_s</name></name></type> <name><name>RISCV_capabilities</name><index>[
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"riscv_arch.def"</cpp:file></cpp:include>
]</index></name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_RISCVCAP_IMPL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RISCV_DEFINE_CAP</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>, <parameter><type><name>INDEX</name></type></parameter>, <parameter><type><name>BIT_INDEX</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ #NAME, INDEX, BIT_INDEX },</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>RISCV_capability_s</name></name></type> <name><name>RISCV_capabilities</name><index>[]</index></name> <init>= <expr><block>{
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"riscv_arch.def"</cpp:file></cpp:include>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RISCV_DEFINE_CAP</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>, <parameter><type><name>INDEX</name></type></parameter>, <parameter><type><name>BIT_INDEX</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>+1</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>kRISCVNumCaps</name> <init>=</init></decl>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"riscv_arch.def"</cpp:file></cpp:include>
;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RISCV_HAS_ZBB_AND_ZBC</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(RISCV_HAS_ZBB() &amp;&amp; RISCV_HAS_ZBC())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RISCV_HAS_ZBKB_AND_ZKND_AND_ZKNE</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(RISCV_HAS_ZBKB() &amp;&amp; RISCV_HAS_ZKND() &amp;&amp; RISCV_HAS_ZKNE())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RISCV_HAS_ZKND_AND_ZKNE</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(RISCV_HAS_ZKND() &amp;&amp; RISCV_HAS_ZKNE())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RISCV_HAS_ZVKB</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(RISCV_HAS_ZVBB() || RISCV_HAS_ZVKB())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RISCV_HAS_ZVKB_AND_ZVKNHA</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(RISCV_HAS_ZVKB() &amp;&amp; RISCV_HAS_ZVKNHA())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RISCV_HAS_ZVKB_AND_ZVKNHB</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(RISCV_HAS_ZVKB() &amp;&amp; RISCV_HAS_ZVKNHB())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RISCV_HAS_ZVKB_AND_ZVKSED</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(RISCV_HAS_ZVKB() &amp;&amp; RISCV_HAS_ZVKSED())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RISCV_HAS_ZVKB_AND_ZVKSH</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(RISCV_HAS_ZVKB() &amp;&amp; RISCV_HAS_ZVKSH())</cpp:value></cpp:define>
<function_decl><type><name>size_t</name></type> <name>riscv_vlen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
</unit>
